{"mappings":"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","sources":["src/three-cube.js"],"sourcesContent":["import * as THREE from \"three\"\n\nconst DEFAULT_COLORS = [\"#B90000\", \"#ffffff\", \"#FFD500\", \"#FF5900\", \"#009B48\", \"#0045AD\"]\nconst SNAPPING_TIME = 200\nconst SPACING_FACTOR = 1.1\n\n/**\n * @typedef  CubeOptions\n * @type {object}\n * @property {THREE.Scene} scene\n * @property {HTMLCanvasElement} canvas\n * @property {THREE.Camera} camera\n * @property {number} x\n * @property {number} y\n * @property {number} z\n * @property {number} cubeSize\n * @property {THREE.Vector3} [position]\n * @property {()=>void} [onInteractStart] By default when mouse pointer starts \n * to rotate the cube, a pointerup event is dispatched on renderig element to prevent \n * any Control from rotating camera. This behaviour can be overridden by passing a \n * custom function which may do nothing if needed.\n * @property {()=>void} [onInteractEnd] Optional callback when user has finished \n * interacting with the cube.\n * @property {string[]} [colors] hex color array of length 6\n */\n\nconst AXES = /** @type {Array<\"x\"|\"y\"|\"z\">} */ ([\"x\", \"y\", \"z\"])\nconst STATES = {\n\tIDLE: 0,\n\tTURNING_CUBE: 1,\n\tAUTO_TURNING_CUBE: 2\n}\n\nexport class THREECube {\n\t/**\n\t * Creates an Grid arrangement of cubes in x, y and z axes. Logically the indexing of the layers\n\t * follows the negative axis of the direction in question. \n\t * \n\t * Ex: The layers in the x plane are indexed x0, x1, x2.. With x0 having the highest position x value\n\t * @param {CubeOptions} options \n\t */\n\tconstructor(options) {\n\t\tthis.scene = options.scene\n\t\tthis.cubeSize = options.cubeSize\n\t\tthis.cubes = /** @type {THREE.Object3D[]} */ ([])\n\t\tthis.layout = {\n\t\t\tx: options.x || 1,\n\t\t\ty: options.y || 1,\n\t\t\tz: options.z || 1\n\t\t}\n\t\tthis.turns = /** @type {string[]} */ ([])\n\t\tthis.state = STATES.IDLE\n\n\t\tconst rotationAxis = new THREE.Vector3(1, 1, 1)\n\t\t/** @type {THREE.Object3D} */\n\t\tlet referenceCube\n\t\tconst rotatingCubes = /** @type {THREE.Object3D[]} */ ([])\n\t\tlet directionCheck = false\n\t\tlet totalRotated = 0\n\n\t\tlet snapDelta = 0\n\t\tlet previousTime = 0\n\n\t\tconst canvas = options.canvas\n\t\tconst camera = options.camera\n\t\tconst scene = this.scene\n\t\tconst interactStart = options.onInteractStart || (() => {\n\t\t\t//this because we have no control over eventhandling of trackball controls\n\t\t\tcanvas.dispatchEvent(new PointerEvent(\"pointerup\"))\n\t\t})\n\t\tconst interactEnd = options.onInteractEnd || (() => {})\n\t\tconst cubeSize = options.cubeSize\n\t\tconst gridMultiplier = cubeSize * SPACING_FACTOR\n\t\tconst _this = this\n\t\t/** @type {\"x\"|\"y\"|\"z\"} */\n\t\tlet fixedNormal\n\t\tconst previous3DPoint = new THREE.Vector3()\n\t\tconst differenceVector = new THREE.Vector3()\n\n\t\tconst mousePoint = new THREE.Vector2()\n\t\tconst previousMousePoint = new THREE.Vector2()\n\t\tconst directionVector = new THREE.Vector2()\n\t\tconst startMousePoint = new THREE.Vector2()\n\t\tconst worldNormal = new THREE.Vector3()\n\t\tthis.unbindHandlers = () => {}\n\t\tlet currentLayer = \"z0\"\n\t\tlet colorArray = DEFAULT_COLORS\n\t\tif (options.colors instanceof Array && options.colors.length == 6)\n\t\t\tcolorArray = options.colors\n\t\tthis.position = new THREE.Vector3(0, 0, 0)\n\t\tif (options.position instanceof THREE.Vector3)\n\t\t\tthis.position = options.position\n\n\t\tfunction setBindings() {\n\t\t\t/**\n\t\t\t * @param {MouseEvent} event \n\t\t\t */\n\t\t\tfunction onRubixCanvasMouseDown(event) {\n\t\t\t\tif (_this.state == STATES.AUTO_TURNING_CUBE)\n\t\t\t\t\treturn\n\n\t\t\t\t_this.state = STATES.IDLE\n\t\t\t\tif (snapDelta)\n\t\t\t\t\treturn\n\n\t\t\t\tmousePoint.x = event.pageX\n\t\t\t\tmousePoint.y = event.pageY\n\n\t\t\t\tconst vector2 = new THREE.Vector2((mousePoint.x / canvas.width) * 2 - 1, -(mousePoint.y / canvas.height) * 2 + 1)\n\t\t\t\tconst raycaster = new THREE.Raycaster()\n\t\t\t\traycaster.setFromCamera(vector2, camera)\n\t\t\t\tconst intersectionObject = raycaster.intersectObjects(scene.children)[0]\n\t\t\t\tif (intersectionObject) {\n\t\t\t\t\tconst foundCube = _this.cubes.find(cube => cube == intersectionObject.object)\n\t\t\t\t\tif (foundCube) {\n\t\t\t\t\t\tinteractStart()\n\t\t\t\t\t\t_this.state = STATES.TURNING_CUBE\n\t\t\t\t\t\treferenceCube = intersectionObject.object\n\t\t\t\t\t\tworldNormal.copy(intersectionObject.face.normal)\n\t\t\t\t\t\tworldNormal.transformDirection(referenceCube.matrixWorld)\n\t\t\t\t\t\tprevious3DPoint.copy(intersectionObject.point)\n\t\t\t\t\t\t//calculate what normal it is??\n\t\t\t\t\t\tif (Math.round(worldNormal.x))\n\t\t\t\t\t\t\tfixedNormal = \"x\"\n\t\t\t\t\t\telse if (Math.round(worldNormal.y))\n\t\t\t\t\t\t\tfixedNormal = \"y\"\n\t\t\t\t\t\telse if (Math.round(worldNormal.z))\n\t\t\t\t\t\t\tfixedNormal = \"z\"\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpreviousMousePoint.copy(mousePoint)\n\t\t\t\tstartMousePoint.copy(mousePoint)\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {MouseEvent} event \n\t\t\t */\n\t\t\tfunction onRubixCanvasMouseMove(event) {\n\t\t\t\t//event.preventDefault()\n\t\t\t\tif (snapDelta)\n\t\t\t\t\treturn\n\n\t\t\t\tmousePoint.x = event.pageX\n\t\t\t\tmousePoint.y = event.pageY\n\n\n\t\t\t\tif (_this.state == STATES.TURNING_CUBE) {\n\t\t\t\t\tif (!directionCheck) {\n\t\t\t\t\t\tif (previousMousePoint.distanceToSquared(mousePoint) < 3)\n\t\t\t\t\t\t\treturn\n\t\t\t\t\t\trotatingCubes.length = 0\n\n\t\t\t\t\t\tconst vector2 = new THREE.Vector2((mousePoint.x / canvas.width) * 2 - 1,\n\t\t\t\t\t\t\t-(mousePoint.y / canvas.height) * 2 + 1)\n\t\t\t\t\t\tconst raycaster = new THREE.Raycaster()\n\t\t\t\t\t\traycaster.setFromCamera(vector2, camera)\n\t\t\t\t\t\tconst intersectionObject = raycaster.intersectObjects(scene.children)[0]\n\t\t\t\t\t\tdifferenceVector.copy(intersectionObject.point).sub(previous3DPoint)\n\t\t\t\t\t\tconst x = Math.abs(differenceVector.x)\n\t\t\t\t\t\tconst y = Math.abs(differenceVector.y)\n\t\t\t\t\t\tconst z = Math.abs(differenceVector.z)\n\t\t\t\t\t\t/** @type {\"x\"|\"y\"|\"z\"} */\n\t\t\t\t\t\tlet rotationAbout = null\n\t\t\t\t\t\tif (fixedNormal == \"x\") {\n\t\t\t\t\t\t\trotationAbout = z > y ? \"y\" : \"z\"\n\t\t\t\t\t\t} else if (fixedNormal == \"y\") {\n\t\t\t\t\t\t\trotationAbout = x > z ? \"z\" : \"x\"\n\t\t\t\t\t\t} else if (fixedNormal == \"z\") {\n\t\t\t\t\t\t\trotationAbout = y > x ? \"x\" : \"y\"\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (rotationAbout) {\n\t\t\t\t\t\t\tsetRotationAbout(rotationAbout)\n\t\t\t\t\t\t\tdirectionCheck = true\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst x = mousePoint.x - previousMousePoint.x\n\t\t\t\t\t\tconst y = mousePoint.y - previousMousePoint.y\n\t\t\t\t\t\tconst rotationAngle = ((x * directionVector.x) + (y * directionVector.y)) / 100\n\t\t\t\t\t\ttotalRotated += rotationAngle\n\t\t\t\t\t\trotatingCubes.forEach(c => rotateAroundWorldAxis(c, rotationAxis, rotationAngle, _this.position))\n\t\t\t\t\t}\n\t\t\t\t\tpreviousMousePoint.copy(mousePoint)\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfunction onDocumentMouseUp() {\n\t\t\t\tif (_this.state === STATES.TURNING_CUBE){\n\t\t\t\t\tinteractEnd()\n\t\t\t\t\tcommitTurn()\n\t\t\t\t}\n\t\t\t\tif (_this.state !== STATES.AUTO_TURNING_CUBE)\n\t\t\t\t\t_this.state = STATES.IDLE\n\t\t\t\tdirectionCheck = false\n\t\t\t\t//controls.enabled = true\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * @param {\"x\"|\"y\"|\"z\"} axis \n\t\t\t */\n\t\t\tfunction setRotationAbout(axis) {\n\t\t\t\trotationAxis.set(0, 0, 0)\n\t\t\t\trotationAxis[axis] = 1\n\t\t\t\trotatingCubes.length = 0\n\t\t\t\tconst dividedPos = (referenceCube.position[axis] - _this.position[axis]) / gridMultiplier\n\t\t\t\tlet startPos = (options[axis] - 1) / 2\n\t\t\t\tlet index = startPos - dividedPos\n\t\t\t\tcurrentLayer = axis + index\n\t\t\t\tconst layerCubes = _this.getCubesInLayer(axis, index)\n\t\t\t\trotatingCubes.push(...layerCubes)\n\n\t\t\t\tconst otherAxis = AXES.find(oAxis => oAxis != axis && oAxis != fixedNormal)\n\t\t\t\tlet increment = worldNormal[fixedNormal] > 0 ? 2 : -2\n\t\t\t\tif (fixedNormal == \"z\" && axis == \"x\" ||\n\t\t\t\t\tfixedNormal == \"x\" && axis == \"y\" ||\n\t\t\t\t\tfixedNormal == \"y\" && axis == \"z\")\n\t\t\t\t\tincrement = -increment\n\t\t\t\tprevious3DPoint[otherAxis] += increment\n\t\t\t\tconst projection = previous3DPoint.project(camera)\n\t\t\t\tprojection.x = (projection.x + 1) / 2 * canvas.width\n\t\t\t\tprojection.y = -(projection.y - 1) / 2 * canvas.height\n\t\t\t\tdirectionVector.set(projection.x, projection.y).sub(startMousePoint)\n\t\t\t\tdirectionVector.normalize()\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Decides if a turn should happen. Also calculates a snap delta\n\t\t\t */\n\t\t\tfunction commitTurn() {\n\t\t\t\tlet anticlockwiseTurn = false\n\t\t\t\tlet doubleTurn = false\n\t\t\t\tconst direction = Math.sign(totalRotated)\n\t\t\t\ttotalRotated = Math.abs(totalRotated)\n\t\t\t\tlet slot = Math.floor(totalRotated / (Math.PI / 2)) * direction\n\t\t\t\tif (totalRotated % (Math.PI / 2) > Math.PI / 4)\n\t\t\t\t\tslot += 1 * direction\n\t\t\t\tconst otherAxes = AXES.filter(axis => !rotationAxis[axis])\n\t\t\t\tconst nonSymmetricRotation = options[otherAxes[0]] != options[otherAxes[1]]\n\t\t\t\tif (nonSymmetricRotation && (direction * slot % 2) == 1)\n\t\t\t\t\tslot += 1 * direction\n\t\t\t\tslot %= 4\n\n\t\t\t\t/**\n\t\t\t\t * Negative value of direction is a clockwise turn when looked at 0th layers of x,y and z\n\t\t\t\t */\n\t\t\t\tif (direction > 0)\n\t\t\t\t\tanticlockwiseTurn = true\n\n\t\t\t\tif (Math.abs(slot) == 3)\n\t\t\t\t\tanticlockwiseTurn = !anticlockwiseTurn\n\n\t\t\t\tif (Math.abs(slot) == 2) {\n\t\t\t\t\tdoubleTurn = true\n\t\t\t\t\tanticlockwiseTurn = false\n\t\t\t\t}\n\n\t\t\t\tsnapDelta = direction * (direction * slot * (Math.PI / 2) - totalRotated)\n\n\t\t\t\tif (slot) {\n\t\t\t\t\t_this.turns.push(currentLayer + (anticlockwiseTurn ? \"'\" : \"\"))\n\t\t\t\t\tif (doubleTurn)\n\t\t\t\t\t\t_this.turns.push(currentLayer)\n\t\t\t\t}\n\t\t\t\ttotalRotated = 0\n\t\t\t}\n\n\t\t\tcanvas.addEventListener(\"pointerdown\", onRubixCanvasMouseDown)\n\t\t\tdocument.addEventListener(\"pointermove\", onRubixCanvasMouseMove)\n\t\t\tdocument.addEventListener(\"pointerup\", onDocumentMouseUp)\n\n\t\t\t_this.unbindHandlers = function() {\n\t\t\t\tcanvas.removeEventListener(\"pointerdown\", onRubixCanvasMouseDown)\n\t\t\t\tdocument.removeEventListener(\"pointermove\", onRubixCanvasMouseMove)\n\t\t\t\tdocument.removeEventListener(\"pointerup\", onDocumentMouseUp)\n\t\t\t}\n\t\t}\n\n\t\tfunction createCubes() {\n\t\t\tlet indexedPosition = 0\n\t\t\tlet zPos = (options.z - 1) / 2\n\t\t\tconst id = Math.random()\n\t\t\tconst noColor = \"#000000\"\n\t\t\tfor (let z = 0; z < options.z; z++) {\n\t\t\t\tlet yPos = (options.y - 1) / 2\n\t\t\t\tfor (let y = 0; y < options.y; y++) {\n\t\t\t\t\tlet xPos = (options.x - 1) / 2\n\t\t\t\t\tfor (let x = 0; x < options.x; x++) {\n\t\t\t\t\t\tindexedPosition++\n\t\t\t\t\t\tconst faceColors = [\n\t\t\t\t\t\t\tx == 0 ? colorArray[3] : noColor,\n\t\t\t\t\t\t\tx + 1 == options.x ? colorArray[1] : noColor,\n\t\t\t\t\t\t\ty == 0 ? colorArray[5] : noColor,\n\t\t\t\t\t\t\ty + 1 == options.y ? colorArray[4] : noColor,\n\t\t\t\t\t\t\tz == 0 ? colorArray[2] : noColor,\n\t\t\t\t\t\t\tz + 1 == options.z ? colorArray[0] : noColor,\n\t\t\t\t\t\t]\n\n\t\t\t\t\t\tconst geometry = new THREE.BoxGeometry(cubeSize, cubeSize, cubeSize)\n\t\t\t\t\t\tconst materials = /** @type {THREE.MeshPhongMaterial[]} */ ([])\n\t\t\t\t\t\tfaceColors.forEach(color => materials.push(new THREE.MeshPhongMaterial({ color: color })))\n\t\t\t\t\t\tconst cube = new THREE.Mesh(geometry, materials)\n\n\t\t\t\t\t\tcube.name = `CUBE_${id}_${indexedPosition}`\n\n\t\t\t\t\t\tcube.position.x = _this.position.x + (xPos * gridMultiplier)\n\t\t\t\t\t\tcube.position.y = _this.position.y + (yPos * gridMultiplier)\n\t\t\t\t\t\tcube.position.z = _this.position.z + (zPos * gridMultiplier)\n\n\t\t\t\t\t\tscene.add(cube)\n\t\t\t\t\t\t_this.cubes.push(cube)\n\n\t\t\t\t\t\txPos -= 1\n\t\t\t\t\t}\n\t\t\t\t\tyPos -= 1\n\t\t\t\t}\n\t\t\t\tzPos -= 1\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {number} timeStamp \n\t\t */\n\t\tfunction snap(timeStamp) {\n\t\t\tif (snapDelta) {\n\t\t\t\tlet delta = snapDelta * ((timeStamp - previousTime) / SNAPPING_TIME)\n\t\t\t\tif (snapDelta < 0)\n\t\t\t\t\tdelta = Math.max(snapDelta - totalRotated, delta)\n\t\t\t\telse\n\t\t\t\t\tdelta = Math.min(snapDelta - totalRotated, delta)\n\t\t\t\trotatingCubes.forEach(c => rotateAroundWorldAxis(c, rotationAxis, delta, _this.position))\n\t\t\t\ttotalRotated += delta\n\t\t\t\tif (Math.abs(totalRotated - snapDelta) < 0.0001) {\n\t\t\t\t\ttotalRotated = 0\n\t\t\t\t\tsnapDelta = 0\n\t\t\t\t\tconst halfGridMultiplier = gridMultiplier / 2\n\t\t\t\t\trotatingCubes.forEach(cube => {\n\t\t\t\t\t\tcube.position.sub(_this.position)\n\t\t\t\t\t\tcube.position.x = Math.round((cube.position.x) / halfGridMultiplier) * halfGridMultiplier\n\t\t\t\t\t\tcube.position.y = Math.round((cube.position.y) / halfGridMultiplier) * halfGridMultiplier\n\t\t\t\t\t\tcube.position.z = Math.round((cube.position.z) / halfGridMultiplier) * halfGridMultiplier\n\t\t\t\t\t\tcube.position.add(_this.position)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * @param {number} [timeStamp] \n\t\t */\n\t\tfunction perFrame(timeStamp) {\n\t\t\twindow.requestAnimationFrame(perFrame)\n\t\t\tsnap(timeStamp)\n\t\t\tpreviousTime = timeStamp\n\t\t}\n\n\t\tcreateCubes()\n\t\tsetBindings()\n\t\tperFrame()\n\t}\n\n\t/**\n\t * Removes all cubes from scene. Unbinds handlers.\n\t */\n\tdestroy() {\n\t\tthis.cubes.forEach(cube => this.scene.remove(cube))\n\t\tthis.unbindHandlers()\n\t}\n\n\t/**\n\t * Turns the arrangement passed number of times on randomly selected layers\n\t * with randomly selected direction\n\t * @param {number} count\n\t * @param {()=> void} [callback]\n\t */\n\tscramble(count, callback) {\n\t\tconst directions = /** @type {string[]} */ ([])\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\tconst axis = AXES[Math.floor(Math.random() * 3)]\n\t\t\tconst layer = Math.floor(Math.random() * this.layout[axis])\n\t\t\tconst direction = Math.random() > 0.5 ? \"'\" : \"\"\n\t\t\tconst turnCode = `${axis}${layer}${direction}`\n\t\t\tif (turnCode + \"'\" === directions[i - 1] || turnCode === directions[i - 1] + \"'\") {\n\t\t\t\ti--\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tdirections.push(`${axis}${layer}${direction}`)\n\t\t}\n\t\tconsole.log(directions)\n\t\tthis.turn(directions, callback)\n\t}\n\n\t/**\n\t * Rotates the arrangment on specific layers passed as an array of moves. \n\t * A single move is a combination of 3 characaters, ex: y1'. The first character denotes which\n\t * axis to rotate about. The second character is an integer to select a layer in that axis.\n\t * The third optional character denotes the direction of rotation. ' defines anticlockwise. \n\t * When this is absent the rotation is always clockwise.\n\t * @param {string[]} moves Example: [\"x0\", \"y1'\", \"y2\", \"x1\", z0]\n\t * @param {()=>void} callback\n\t */\n\tturn(moves, callback) {\n\t\tlet currentIndex = 0\n\t\tlet turnComplete = false\n\t\tlet previousTime = 0\n\t\tlet totalRotated = 0\n\t\tlet endRotation = Math.PI / 2\n\t\tconst cubesToRotate = /** @type {THREE.Object3D[]} */ ([])\n\t\tconst rotationAxis = new THREE.Vector3()\n\t\tlet rotationDirection = -1\n\t\tthis.state = STATES.AUTO_TURNING_CUBE\n\t\tconst _this = this\n\t\tconst halfGridMultiplier = this.cubeSize * SPACING_FACTOR / 2\n\n\t\t/**\n\t\t * @returns {boolean}\n\t\t */\n\t\tfunction completion() {\n\t\t\tif (turnComplete) {\n\t\t\t\t_this.turns.push(moves[currentIndex])\n\t\t\t\tcurrentIndex++\n\t\t\t\tif (currentIndex === moves.length) {\n\t\t\t\t\treturn true\n\t\t\t\t} else {\n\t\t\t\t\tstartStep(currentIndex)\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction finishTurn() {\n\t\t\t_this.cubes.forEach(cube => {\n\t\t\t\tcube.position.sub(_this.position)\n\t\t\t\tcube.position.x = Math.round((cube.position.x) / halfGridMultiplier) * halfGridMultiplier\n\t\t\t\tcube.position.y = Math.round((cube.position.y) / halfGridMultiplier) * halfGridMultiplier\n\t\t\t\tcube.position.z = Math.round((cube.position.z) / halfGridMultiplier) * halfGridMultiplier\n\t\t\t\tcube.position.add(_this.position)\n\t\t\t})\n\t\t\t_this.state = STATES.IDLE\n\t\t\tcallback && callback()\n\t\t}\n\n\t\t/**\n\t\t * @param {number} index \n\t\t */\n\t\tfunction startStep(index) {\n\t\t\trotationAxis.set(0, 0, 0)\n\t\t\tconst layerAxis = /** @type {\"x\"|\"y\"|\"z\"} */ (moves[index][0])\n\t\t\trotationAxis[layerAxis] = 1\n\t\t\tconst layerIndex = parseInt(moves[index].substring(1))\n\t\t\trotationDirection = (moves[index][moves[index].length - 1] == \"'\" ? 1 : -1)\n\t\t\tcubesToRotate.length = 0\n\t\t\tcubesToRotate.push(..._this.getCubesInLayer(layerAxis, layerIndex))\n\t\t\tturnComplete = false\n\t\t\ttotalRotated = 0\n\t\t\tconst otherAxes = AXES.filter(axis => !rotationAxis[axis])\n\t\t\tconst nonSymmetricRotation = _this.layout[otherAxes[0]] != _this.layout[otherAxes[1]]\n\t\t\tendRotation = Math.PI / 2\n\t\t\tif (nonSymmetricRotation)\n\t\t\t\tendRotation = Math.PI\n\t\t}\n\n\t\t/**\n\t\t * @param {number} timeStamp \n\t\t */\n\t\tfunction turnStep(timeStamp) {\n\t\t\tif (previousTime == 0)\n\t\t\t\tpreviousTime = timeStamp\n\t\t\tlet angleToRotate = (Math.PI / 2) * ((timeStamp - previousTime) / (SNAPPING_TIME))\n\t\t\tpreviousTime = timeStamp\n\t\t\ttotalRotated += angleToRotate\n\t\t\tif (totalRotated >= endRotation) {\n\t\t\t\tturnComplete = true\n\t\t\t\tangleToRotate -= totalRotated - endRotation\n\t\t\t}\n\t\t\tcubesToRotate.forEach(cube => rotateAroundWorldAxis(cube, rotationAxis, angleToRotate * rotationDirection, _this.position))\n\t\t\tif (!completion()) {\n\t\t\t\twindow.requestAnimationFrame(turnStep)\n\t\t\t} else {\n\t\t\t\tfinishTurn()\n\t\t\t}\n\t\t}\n\t\tstartStep(currentIndex)\n\t\tturnStep(0)\n\t}\n\n\t/**\n\t * Returns all the cubes currently positioned in a particular axis and layer.\n\t * @param {\"x\"|\"y\"|\"z\"} axis \n\t * @param {number} index \n\t * @returns {Array<THREE.Object3D>}\n\t */\n\tgetCubesInLayer(axis, index) {\n\t\tlet startPos = (this.layout[axis] - 1) / 2\n\t\tconst position = ((startPos - index) * this.cubeSize * SPACING_FACTOR) + this.position[axis]\n\t\treturn this.cubes.filter(cube => Math.abs(cube.position[axis] - position) < 0.0000001)\n\t}\n\n\t/**\n\t * This applies only for a 3x3x3 arrangement.\n\t * @param {Array<string>|string} turns \n\t * @returns {Array<string>}\n\t */\n\tstatic SingmasterToCubeNotation(turns) {\n\t\tlet arrayTurns\n\t\tif (typeof turns == \"string\")\n\t\t\tarrayTurns = turns.split(\" \")\n\t\telse\n\t\t\tarrayTurns = turns\n\n\t\tconst cubeNotation = /** @type {string[]} */ ([])\n\t\tconst map = {\n\t\t\t\"R\": \"x0\",\n\t\t\t\"L\": \"x2'\",\n\t\t\t\"U\": \"y0\",\n\t\t\t\"D\": \"y2'\",\n\t\t\t\"F\": \"z0\",\n\t\t\t\"B\": \"z2'\"\n\t\t}\n\t\tarrayTurns.forEach(turn => {\n\t\t\tlet cubeTurn = map[turn[0]]\n\t\t\tif (turn[turn.length - 1] === \"'\") {\n\t\t\t\tcubeTurn += \"'\"\n\t\t\t}\n\t\t\tcubeTurn = cubeTurn.replace(\"''\", \"\")\n\t\t\tcubeNotation.push(cubeTurn)\n\t\t\tif (turn[turn.length - 1] === \"2\")\n\t\t\t\tcubeNotation.push(cubeTurn)\n\t\t})\n\n\t\treturn cubeNotation\n\t}\n\n\t/**\n\t * Resets the arrangement to initial state. Sets the turns empty\n\t */\n\treset() {\n\t\tconst gridMultiplier = this.cubeSize * SPACING_FACTOR\n\t\tlet index = 0\n\t\tlet zPos = (this.layout.z - 1) / 2\n\t\tfor (let z = 0; z < this.layout.z; z++) {\n\t\t\tlet yPos = (this.layout.y - 1) / 2\n\t\t\tfor (let y = 0; y < this.layout.y; y++) {\n\t\t\t\tlet xPos = (this.layout.x - 1) / 2\n\t\t\t\tfor (let x = 0; x < this.layout.x; x++) {\n\t\t\t\t\tlet cube = this.cubes[index]\n\t\t\t\t\tcube.position.x = this.position.x + (xPos * gridMultiplier)\n\t\t\t\t\tcube.position.y = this.position.y + (yPos * gridMultiplier)\n\t\t\t\t\tcube.position.z = this.position.z + (zPos * gridMultiplier)\n\t\t\t\t\tcube.rotation.set(0, 0, 0)\n\t\t\t\t\tcube.quaternion.set(0, 0, 0, 1)\n\t\t\t\t\txPos -= 1\n\t\t\t\t\tindex++\n\t\t\t\t}\n\t\t\t\tyPos -= 1\n\t\t\t}\n\t\t\tzPos -= 1\n\t\t}\n\t\tthis.turns.length = 0\n\t}\n}\n\nconst matrixAux = new THREE.Matrix4() // global auxiliar variable\n/**\n * @param {THREE.Object3D} obj\n * @param {THREE.Vector3} axis\n * @param {number} radians\n * @param {THREE.Vector3} pivot\n */\nfunction rotateAroundWorldAxis(obj, axis, radians, pivot) {\n\tobj.position.sub(pivot)\n\tobj.updateMatrix()\n\tmatrixAux.makeRotationAxis(axis, radians)\n\tobj.matrix.multiplyMatrices(matrixAux, obj.matrix) // r56\n\tmatrixAux.extractRotation(obj.matrix)\n\tobj.rotation.setFromRotationMatrix(matrixAux, obj.rotation.order)\n\tobj.position.setFromMatrixPosition(obj.matrix)\n\tobj.position.add(pivot)\n}"],"names":[],"version":3,"file":"three-cube.module.js.map"}